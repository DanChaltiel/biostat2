varnames = names(data)
varnames = names(data)
parsed = parse_formula(formula, varnames)
data = parse_data(expand_formula(formula, varnames), data)
names(data) = remove_blank(names(data))
varform = names(data)
if (regroup) {
numdata = varform[sapply(data, function(x) is.numeric(x) & !is.Surv(x))]
catdata = varform[sapply(data, is.character.or.factor)]
survdata = varform[sapply(data, is.Surv)]
parsed$left = regroup(parsed$left, numdata, catdata, survdata)
parsed$right = regroup(parsed$right, numdata, catdata, survdata)
}
eg = expand.grid(left=parsed$left, right=parsed$right, stringsAsFactors = F)
comb = eg %>%
pmap(list) %>%
modify_depth(2, ~{
if(.x==".") return(NULL)
of = .x %>% .[.!="."] %>% elements %>% remove_blank
data %>% select(one_of(of))
})
results = comb %>%
map(cross_list,
funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
results
comb
cross_list(comb[[1]], funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
comb[[1]]
cross_list
x
x
x()
eg
eg
eg %>%
pmap(list)
results = data %>% select(x) %>% cross_list(funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
vars_select(data, x)
tidyselect::vars_select(data, x)
tidyselect::vars_select(names(data), x)
cross_list
data %>% select(tidyselect::vars_select(names(data), x))
tidyselect::vars_select(names(data), x) %>% class
data %>% select(tidyselect::vars_select(names(data), x)) %>% cross_list(funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
results = data %>% select(tidyselect::vars_select(names(data), x)) %>% cross_list(data=., funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
cross_all
comb
data
cross_list
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
# Formula parsing *****************************************************
browser()
varnames = names(data)
varnames = names(data)
parsed = parse_formula(formula, varnames)
data = parse_data(expand_formula(formula, varnames), data)
names(data) = remove_blank(names(data))
varform = names(data)
if (regroup) {
numdata = varform[sapply(data, function(x) is.numeric(x) & !is.Surv(x))]
catdata = varform[sapply(data, is.character.or.factor)]
survdata = varform[sapply(data, is.Surv)]
parsed$left = regroup(parsed$left, numdata, catdata, survdata)
parsed$right = regroup(parsed$right, numdata, catdata, survdata)
}
eg = expand.grid(left=parsed$left, right=parsed$right, stringsAsFactors = F)
comb = eg %>%
pmap(list) %>%
modify_depth(2, ~{
if(.x==".") return(NULL)
of = .x %>% .[.!="."] %>% elements %>% remove_blank
data %>% select(one_of(of))
})
data %>% select(tidyselect::vars_select(names(data), x))
cross_list
comb
results = data %>% select(tidyselect::vars_select(names(data), x)) %>% cross_all(funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
results
by
data %>% select(tidyselect::vars_select(names(data), by))
x2 = data %>% select(tidyselect::vars_select(names(data), x))
y2
y2=NULL
cross_all(x2, y2, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
?select_
cross_all
x
x=starts_with("Sepal")
x
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
tidyselect::vars_select(names(data), x) %>% class
tidyselect::vars_select(names(data), x)
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
tidyselect::vars_select(names(data), x)
y2 = data %>% select(tidyselect::vars_select(names(data), by))
y2
x2 = data %>% select(tidyselect::vars_select(names(data), x, -by))
x2
results = cross_all(x2, y2, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
results
assert_scalar
y2
byname = tidyselect::vars_select(names(data), by)
byname
assert_scalar(byname)
x2
assert_scalar(y2)
check_scalar(byname)
check_scalar(y2)
test_scalar(y2)
install.packages("assertive")
assertive::assert_is_scalar(byname)
assertive::assert_is_scalar(y2)
y2
xname = tidyselect::vars_select(names(data), x, -by)
assertive::assert_is_scalar(xname)
assert_scalar(xname)
assert_scalar(xname, .var.name = "frfrfr")
cross_all
##' @export
##' @import checkmate dplyr purrr
crosstable = function(data, x=everything(), by=NULL, formula = cbind(...) ~ ., funs = c(" " = cross_summary), ..., margin = c("all", "row", "column", "cell"), total = c("none", "all", "row", "column", "FALSE", "TRUE", 0, 1, 2), digits = 2, showNA = c("no", "ifany", "always"), method = c("pearson", "kendall", "spearman"), times = NULL, followup = FALSE, test = FALSE, test.summarize = test.summarize.auto, test.survival = test.survival.logrank, test.tabular = test.tabular.auto, show.test = display.test, plim = 4, show.method = TRUE, effect = FALSE, effect.summarize = diff.mean.auto, effect.tabular = or.row.by.col, effect.survival = effect.survival.coxph, conf.level = 0.95, label = TRUE, regroup = FALSE) {
# Arguments checks ****************************************************
coll = makeAssertCollection()
# assertFormula(formula, add=coll)
assertDataFrame(data, add=coll)
assertCount(digits, add=coll)
assertLogical(label, add=coll)
if (!is.character(funs)) {
nomf = names(funs)
funs = as.character(as.list(substitute(funs)))
funs = funs[funs != "c" & funs != "list"]
names(funs) = nomf
}
if (missing(margin)) margin = "all"
if (is.character(margin)) {
assertSubset(margin, c("all", "row", "column", "cell"), add=coll)
if(is.null(margin)) {
margin=0:2 #defaulting
} else {
marginopts = list(all = 0:2,
row = 1,
column = 2,
cell = 0)
margin = unname(unlist(marginopts[margin]))
}
}
if (missing(total)) total = "none"
if (is.character(total)) {
assertChoice(total, c("none", "both", "all", "row", "column"), add=coll)
if(is.null(total)) {
total=0 #defaulting
} else {
totalopts = list(all = 1:2,
both = 1:2,
row = 1,
column = 2,
none = 0)
total = unname(unlist(totalopts[total]))
}
}
if (is_formula(formula))
formula = paste(deparse(formula, 500), collapse="")
reportAssertions(coll)
byname = tidyselect::vars_select(names(data), by)
xnames = tidyselect::vars_select(names(data), x, -by)
assert_scalar(byname, .var.name = "by")
assert_(xnames, .var.name = "x")
# Formula parsing *****************************************************
# varnames = names(data)
# parsed = parse_formula(formula, varnames)
# # parsed$left = gsub("\\n *", "", parsed$left)
#
# data = parse_data(expand_formula(formula, varnames), data)
# names(data) = remove_blank(names(data))
# varform = names(data)
#
# if (regroup) {
#     numdata = varform[sapply(data, function(x) is.numeric(x) & !is.Surv(x))]
#     catdata = varform[sapply(data, is.character.or.factor)]
#     survdata = varform[sapply(data, is.Surv)]
#
#     parsed$left = regroup(parsed$left, numdata, catdata, survdata)
#     parsed$right = regroup(parsed$right, numdata, catdata, survdata)
# }
#
# eg = expand.grid(left=parsed$left, right=parsed$right, stringsAsFactors = F)
# #eg (DF) : chaque ligne est une combinaison by en fonction du nombre de +
#
#
# comb = eg %>%
#     pmap(list) %>%
#     modify_depth(2, ~{
#         if(.x==".") return(NULL)
#         of = .x %>% .[.!="."] %>% elements %>% remove_blank
#         data %>% select(one_of(of))
#     })
#
#
# # Results *****************************************************
#
# results = comb %>%
#     map(cross_list, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
# browser()
tidyselect::vars_select(names(data), x)
y2 = data %>% select(byname)
x2 = data %>% select(xnames)
results = cross_all(x2, y2, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
if (length(results) == 1) {
results = results[[1]]
class(results) = c("crosstable", "data.frame")
} else {
results = results[results != "What?"]
}
# attr(results, "formula") = formula
# attr(results, "left") = parsed$left
# attr(results, "right") = parsed$right
# attr(results, "by") = parsed$by
# attr(results, "data") = data
return(results)
}
crosstable(data = iris, x=starts_with("S"), by="Species")
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
crosstable(data = iris, x=starts_with("S"), by="Species")
cross_list
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
data
varnames = names(data)
parsed = parse_formula(formula, varnames)
parse_data(expand_formula(formula, varnames), data)
x2 = data %>% select(xnames)
y2 = data %>% select(byname)
x2
y2
cross_all(x2, y2, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
crosstable(data = iris, x=starts_with("S"), by="Species")
crosstable(data = iris, x=everything(), by="Species")
crosstable(data = iris, x=everything())
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
by
tidyselect::vars_select(names(data), x, -by)
byname = tidyselect::vars_select(names(data), by)
byname
tidyselect::vars_select(names(data), x, -byname)
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
crosstable(data = iris, x=starts_with("S"))
crosstable(data = iris, x=everything())
##' @export
##' @import checkmate dplyr purrr
crosstable = function(data, x=everything(), by=NULL, formula = cbind(...) ~ ., funs = c(" " = cross_summary), ..., margin = c("all", "row", "column", "cell"), total = c("none", "all", "row", "column", "FALSE", "TRUE", 0, 1, 2), digits = 2, showNA = c("no", "ifany", "always"), method = c("pearson", "kendall", "spearman"), times = NULL, followup = FALSE, test = FALSE, test.summarize = test.summarize.auto, test.survival = test.survival.logrank, test.tabular = test.tabular.auto, show.test = display.test, plim = 4, show.method = TRUE, effect = FALSE, effect.summarize = diff.mean.auto, effect.tabular = or.row.by.col, effect.survival = effect.survival.coxph, conf.level = 0.95, label = TRUE, regroup = FALSE) {
# Arguments checks ****************************************************
coll = makeAssertCollection()
# assertFormula(formula, add=coll)
assertDataFrame(data, add=coll)
assertCount(digits, add=coll)
assertLogical(label, add=coll)
if (!is.character(funs)) {
nomf = names(funs)
funs = as.character(as.list(substitute(funs)))
funs = funs[funs != "c" & funs != "list"]
names(funs) = nomf
}
if (missing(margin)) margin = "all"
if (is.character(margin)) {
assertSubset(margin, c("all", "row", "column", "cell"), add=coll)
if(is.null(margin)) {
margin=0:2 #defaulting
} else {
marginopts = list(all = 0:2,
row = 1,
column = 2,
cell = 0)
margin = unname(unlist(marginopts[margin]))
}
}
if (missing(total)) total = "none"
if (is.character(total)) {
assertChoice(total, c("none", "both", "all", "row", "column"), add=coll)
if(is.null(total)) {
total=0 #defaulting
} else {
totalopts = list(all = 1:2,
both = 1:2,
row = 1,
column = 2,
none = 0)
total = unname(unlist(totalopts[total]))
}
}
if (is_formula(formula))
formula = paste(deparse(formula, 500), collapse="")
reportAssertions(coll)
# browser()
byname = tidyselect::vars_select(names(data), by)
xnames = tidyselect::vars_select(names(data), x, -byname)
assert_scalar(byname, .var.name = "by")
# Formula parsing *****************************************************
# varnames = names(data)
# parsed = parse_formula(formula, varnames)
# # parsed$left = gsub("\\n *", "", parsed$left)
#
# data = parse_data(expand_formula(formula, varnames), data)
# names(data) = remove_blank(names(data))
# varform = names(data)
#
# if (regroup) {
#     numdata = varform[sapply(data, function(x) is.numeric(x) & !is.Surv(x))]
#     catdata = varform[sapply(data, is.character.or.factor)]
#     survdata = varform[sapply(data, is.Surv)]
#
#     parsed$left = regroup(parsed$left, numdata, catdata, survdata)
#     parsed$right = regroup(parsed$right, numdata, catdata, survdata)
# }
#
# eg = expand.grid(left=parsed$left, right=parsed$right, stringsAsFactors = F)
# #eg (DF) : chaque ligne est une combinaison by en fonction du nombre de +
#
#
# comb = eg %>%
#     pmap(list) %>%
#     modify_depth(2, ~{
#         if(.x==".") return(NULL)
#         of = .x %>% .[.!="."] %>% elements %>% remove_blank
#         data %>% select(one_of(of))
#     })
#
#
# # Results *****************************************************
#
# results = comb %>%
#     map(cross_list, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
# browser()
# tidyselect::vars_select(names(data), x)
x2 = data %>% select(xnames)
y2 = data %>% select(byname)
results = cross_all(x2, y2, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
# if (length(results) == 1) {
#     results = results[[1]]
# } else {
#     results = results[results != "What?"]
# }
class(results) = c("crosstable", "data.frame")
# attr(results, "formula") = formula
# attr(results, "left") = parsed$left
# attr(results, "right") = parsed$right
# attr(results, "by") = parsed$by
# attr(results, "data") = data
return(results)
}
crosstable(data = iris, x=starts_with("S"), by="Species")
crosstable(data = iris, x=starts_with("S"))
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
crosstable(data = iris, x=starts_with("S"), by="Species")
crosstable(data = iris, x=starts_with("S"))
crosstable(data = iris, x=everything())
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
byname = tidyselect::vars_select(names(data), by)
byname
xnames = tidyselect::vars_select(names(data), x, -byname)
xnames
assert_scalar(byname, .var.name = "by", null.ok = T)
byname = tidyselect::vars_select(names(data), by)
xnames = tidyselect::vars_select(names(data), x, -byname)
byname
xnames
x2 = data %>% select(xnames)
y2 = data %>% select(byname)
x2
y2
install.packages("assertive")
ncol(y2)
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
##' @export
##' @import checkmate dplyr purrr
crosstable = function(data, x=everything(), by=NULL, formula = cbind(...) ~ ., funs = c(" " = cross_summary), ..., margin = c("all", "row", "column", "cell"), total = c("none", "all", "row", "column", "FALSE", "TRUE", 0, 1, 2), digits = 2, showNA = c("no", "ifany", "always"), method = c("pearson", "kendall", "spearman"), times = NULL, followup = FALSE, test = FALSE, test.summarize = test.summarize.auto, test.survival = test.survival.logrank, test.tabular = test.tabular.auto, show.test = display.test, plim = 4, show.method = TRUE, effect = FALSE, effect.summarize = diff.mean.auto, effect.tabular = or.row.by.col, effect.survival = effect.survival.coxph, conf.level = 0.95, label = TRUE, regroup = FALSE) {
# Arguments checks ****************************************************
coll = makeAssertCollection()
# assertFormula(formula, add=coll)
assertDataFrame(data, add=coll)
assertCount(digits, add=coll)
assertLogical(label, add=coll)
if (!is.character(funs)) {
nomf = names(funs)
funs = as.character(as.list(substitute(funs)))
funs = funs[funs != "c" & funs != "list"]
names(funs) = nomf
}
if (missing(margin)) margin = "all"
if (is.character(margin)) {
assertSubset(margin, c("all", "row", "column", "cell"), add=coll)
if(is.null(margin)) {
margin=0:2 #defaulting
} else {
marginopts = list(all = 0:2,
row = 1,
column = 2,
cell = 0)
margin = unname(unlist(marginopts[margin]))
}
}
if (missing(total)) total = "none"
if (is.character(total)) {
assertChoice(total, c("none", "both", "all", "row", "column"), add=coll)
if(is.null(total)) {
total=0 #defaulting
} else {
totalopts = list(all = 1:2,
both = 1:2,
row = 1,
column = 2,
none = 0)
total = unname(unlist(totalopts[total]))
}
}
if (is_formula(formula))
formula = paste(deparse(formula, 500), collapse="")
reportAssertions(coll)
# browser()
byname = tidyselect::vars_select(names(data), by)
xnames = tidyselect::vars_select(names(data), x, -byname)
assert_scalar(byname, .var.name = "by", null.ok = T)
# Formula parsing *****************************************************
# varnames = names(data)
# parsed = parse_formula(formula, varnames)
# # parsed$left = gsub("\\n *", "", parsed$left)
#
# data = parse_data(expand_formula(formula, varnames), data)
# names(data) = remove_blank(names(data))
# varform = names(data)
#
# if (regroup) {
#     numdata = varform[sapply(data, function(x) is.numeric(x) & !is.Surv(x))]
#     catdata = varform[sapply(data, is.character.or.factor)]
#     survdata = varform[sapply(data, is.Surv)]
#
#     parsed$left = regroup(parsed$left, numdata, catdata, survdata)
#     parsed$right = regroup(parsed$right, numdata, catdata, survdata)
# }
#
# eg = expand.grid(left=parsed$left, right=parsed$right, stringsAsFactors = F)
# #eg (DF) : chaque ligne est une combinaison by en fonction du nombre de +
#
#
# comb = eg %>%
#     pmap(list) %>%
#     modify_depth(2, ~{
#         if(.x==".") return(NULL)
#         of = .x %>% .[.!="."] %>% elements %>% remove_blank
#         data %>% select(one_of(of))
#     })
#
#
# # Results *****************************************************
#
# results = comb %>%
#     map(cross_list, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
# browser()
# tidyselect::vars_select(names(data), x)
x2 = data %>% select(xnames)
y2 = data %>% select(byname)
if(ncol(y2)==0) y2=NULL
results = cross_all(x2, y2, funs=funs, ..., margin=margin, total=total, digits=digits, showNA=showNA, method=method, times=times, followup=followup, test=test, test.summarize=test.summarize, test.tabular=test.tabular, test.survival=test.survival, show.test=show.test, plim=plim, effect=effect, effect.summarize=effect.summarize, effect.tabular=effect.tabular, effect.survival=effect.survival, conf.level=conf.level, show.method=show.method, label=label)
# if (length(results) == 1) {
#     results = results[[1]]
# } else {
#     results = results[results != "What?"]
# }
class(results) = c("crosstable", "data.frame")
# attr(results, "formula") = formula
# attr(results, "left") = parsed$left
# attr(results, "right") = parsed$right
# attr(results, "by") = parsed$by
# attr(results, "data") = data
return(results)
}
crosstable(data = iris, x=starts_with("S"), by="Species")
crosstable(data = iris, x=starts_with("S"))
source('F:/GITHUB/fork_biostat2/R/crosstable.r', encoding = 'UTF-8')
crosstable(data = iris, x=starts_with("S"), by="Species")
crosstable(data = iris, x=starts_with("S"))
crosstable(data = iris, x=everything())
crosstable(data = iris, x=Sepal.Length, by="Species")
select
dplyr:::select.data.frame
dplyr:::select_impl
`!!!`
?`!!!`
crosstable(data = iris, x="Sepal.Length", by="Species")
?mean_by
??mean_by
tbl_vars
dplyr:::tbl_vars.data.frame
dplyr:::tbl_vars.tbl_cube
tbl_cube
?tbl_cube
nasa
head(as.data.frame(nasa))
titanic <- as.tbl_cube(Titanic)
head(as.data.frame(titanic))
as.tbl_cube(Titanic) %>% head
as.tbl_cube(Titanic)
(Titanic)
cross_all
cross_one
library(gmodels)
data(infert, package = "datasets")
CrossTable(infert$education, infert$induced, expected = TRUE)
library(biostat2)
library(biostat2)
